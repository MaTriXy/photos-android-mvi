import org.jetbrains.kotlin.gradle.dsl.KotlinVersion
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
    ext {
        kotlin_version = '1.8.21'
        compose_version = '1.5.0-alpha02'
        compose_compiler_version = '1.4.7'
    }
    dependencies {
        classpath libs.hilt.android.gradle.plugin
        classpath libs.sqldelight.gradle.plugin
        classpath libs.google.services
    }

    project.ext.set("app_version_code", 97)
    project.ext.set("app_version_name", "0.0.104")

}// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    id 'com.android.application' version '8.0.1' apply false
    id 'com.android.library' version '8.0.1' apply false
    id 'org.jetbrains.kotlin.android' version "$kotlin_version" apply false
    id 'com.squareup.sqldelight' version '1.5.5' apply false
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin' version '2.0.1' apply false
    id "com.bnorm.power.kotlin-power-assert" version "0.13.0" apply false
    id "org.sonarqube" version "4.0.0.2929"
    id "com.autonomousapps.dependency-analysis" version "1.20.0" apply true
}

tasks.register('clean', Delete) {
    delete rootProject.buildDir
}

sonarqube {
    properties {
        property "sonar.projectKey", "savvasdalkitsis_uhuruphotos-android"
        property "sonar.organization", "savvasdalkitsis"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

subprojects {
    if (name == "app") {
        apply plugin: "com.android.application"
    } else {
        apply plugin: "com.android.library"
    }

    apply plugin: "com.bnorm.power.kotlin-power-assert"
    apply plugin: 'org.jetbrains.kotlin.android'
    apply plugin: 'kotlin-kapt'

    android {
        compileSdk 33

        defaultConfig {
            minSdk 23
            targetSdk 33

            testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        }
        testFixtures {
            enable = true
        }
        buildTypes {
            release {
                minifyEnabled false
            }
        }
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_17
            targetCompatibility JavaVersion.VERSION_17
        }
        kotlinOptions {
            jvmTarget = '17'
        }
    }

    dependencies {
        kapt libs.hilt.dagger.compiler
        kapt libs.androidx.hilt.compiler
    }

    tasks.withType(KotlinCompile).configureEach {
        compilerOptions {
            languageVersion = KotlinVersion.KOTLIN_1_9
            freeCompilerArgs.addAll(
                    "-opt-in=com.google.accompanist.permissions.ExperimentalPermissionsApi",
                    "-opt-in=androidx.compose.animation.ExperimentalAnimationApi",
                    "-opt-in=androidx.compose.animation.graphics.ExperimentalAnimationGraphicsApi",
                    "-opt-in=androidx.compose.foundation.ExperimentalFoundationApi",
                    "-opt-in=androidx.compose.foundation.layout.ExperimentalLayoutApi",
                    "-opt-in=androidx.compose.material.ExperimentalMaterialApi",
                    "-opt-in=androidx.compose.material3.windowsizeclass.ExperimentalMaterial3WindowSizeClassApi",
                    "-opt-in=androidx.compose.ui.ExperimentalComposeUiApi",
                    "-opt-in=coil.annotation.ExperimentalCoilApi",
                    "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi",
                    "-opt-in=kotlinx.coroutines.FlowPreview",
                    "-opt-in=kotlinx.ExperimentalStdlibApi",
                    "-opt-in=kotlin.ExperimentalStdlibApi",
                    "-Xcontext-receivers",
            )
        }
    }
}