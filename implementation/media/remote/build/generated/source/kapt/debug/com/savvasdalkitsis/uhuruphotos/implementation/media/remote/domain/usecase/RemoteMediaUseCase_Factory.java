// Generated by Dagger (https://dagger.dev).
package com.savvasdalkitsis.uhuruphotos.implementation.media.remote.domain.usecase;

import com.savvasdalkitsis.uhuruphotos.api.auth.usecase.ServerUseCase;
import com.savvasdalkitsis.uhuruphotos.feature.user.domain.api.usecase.UserUseCase;
import com.savvasdalkitsis.uhuruphotos.implementation.media.remote.repository.RemoteMediaRepository;
import com.savvasdalkitsis.uhuruphotos.implementation.media.remote.worker.RemoteMediaItemWorkScheduler;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RemoteMediaUseCase_Factory implements Factory<RemoteMediaUseCase> {
  private final Provider<ServerUseCase> serverUseCaseProvider;

  private final Provider<RemoteMediaRepository> remoteMediaRepositoryProvider;

  private final Provider<RemoteMediaItemWorkScheduler> remoteMediaItemWorkSchedulerProvider;

  private final Provider<UserUseCase> userUseCaseProvider;

  public RemoteMediaUseCase_Factory(Provider<ServerUseCase> serverUseCaseProvider,
      Provider<RemoteMediaRepository> remoteMediaRepositoryProvider,
      Provider<RemoteMediaItemWorkScheduler> remoteMediaItemWorkSchedulerProvider,
      Provider<UserUseCase> userUseCaseProvider) {
    this.serverUseCaseProvider = serverUseCaseProvider;
    this.remoteMediaRepositoryProvider = remoteMediaRepositoryProvider;
    this.remoteMediaItemWorkSchedulerProvider = remoteMediaItemWorkSchedulerProvider;
    this.userUseCaseProvider = userUseCaseProvider;
  }

  @Override
  public RemoteMediaUseCase get() {
    return newInstance(serverUseCaseProvider.get(), remoteMediaRepositoryProvider.get(), remoteMediaItemWorkSchedulerProvider.get(), userUseCaseProvider.get());
  }

  public static RemoteMediaUseCase_Factory create(Provider<ServerUseCase> serverUseCaseProvider,
      Provider<RemoteMediaRepository> remoteMediaRepositoryProvider,
      Provider<RemoteMediaItemWorkScheduler> remoteMediaItemWorkSchedulerProvider,
      Provider<UserUseCase> userUseCaseProvider) {
    return new RemoteMediaUseCase_Factory(serverUseCaseProvider, remoteMediaRepositoryProvider, remoteMediaItemWorkSchedulerProvider, userUseCaseProvider);
  }

  public static RemoteMediaUseCase newInstance(ServerUseCase serverUseCase,
      RemoteMediaRepository remoteMediaRepository,
      RemoteMediaItemWorkScheduler remoteMediaItemWorkScheduler, UserUseCase userUseCase) {
    return new RemoteMediaUseCase(serverUseCase, remoteMediaRepository, remoteMediaItemWorkScheduler, userUseCase);
  }
}
