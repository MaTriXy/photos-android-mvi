// Generated by Dagger (https://dagger.dev).
package com.savvasdalkitsis.uhuruphotos.implementation.userbadge.usecase;

import com.savvasdalkitsis.uhuruphotos.api.albums.worker.AlbumWorkScheduler;
import com.savvasdalkitsis.uhuruphotos.api.auth.usecase.ServerUseCase;
import com.savvasdalkitsis.uhuruphotos.api.media.remote.domain.usecase.RemoteMediaUseCase;
import com.savvasdalkitsis.uhuruphotos.feature.user.domain.api.usecase.UserUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UserBadgeUseCase_Factory implements Factory<UserBadgeUseCase> {
  private final Provider<UserUseCase> userUseCaseProvider;

  private final Provider<AlbumWorkScheduler> albumWorkSchedulerProvider;

  private final Provider<RemoteMediaUseCase> remoteMediaUseCaseProvider;

  private final Provider<ServerUseCase> serverUseCaseProvider;

  public UserBadgeUseCase_Factory(Provider<UserUseCase> userUseCaseProvider,
      Provider<AlbumWorkScheduler> albumWorkSchedulerProvider,
      Provider<RemoteMediaUseCase> remoteMediaUseCaseProvider,
      Provider<ServerUseCase> serverUseCaseProvider) {
    this.userUseCaseProvider = userUseCaseProvider;
    this.albumWorkSchedulerProvider = albumWorkSchedulerProvider;
    this.remoteMediaUseCaseProvider = remoteMediaUseCaseProvider;
    this.serverUseCaseProvider = serverUseCaseProvider;
  }

  @Override
  public UserBadgeUseCase get() {
    return newInstance(userUseCaseProvider.get(), albumWorkSchedulerProvider.get(), remoteMediaUseCaseProvider.get(), serverUseCaseProvider.get());
  }

  public static UserBadgeUseCase_Factory create(Provider<UserUseCase> userUseCaseProvider,
      Provider<AlbumWorkScheduler> albumWorkSchedulerProvider,
      Provider<RemoteMediaUseCase> remoteMediaUseCaseProvider,
      Provider<ServerUseCase> serverUseCaseProvider) {
    return new UserBadgeUseCase_Factory(userUseCaseProvider, albumWorkSchedulerProvider, remoteMediaUseCaseProvider, serverUseCaseProvider);
  }

  public static UserBadgeUseCase newInstance(UserUseCase userUseCase,
      AlbumWorkScheduler albumWorkScheduler, RemoteMediaUseCase remoteMediaUseCase,
      ServerUseCase serverUseCase) {
    return new UserBadgeUseCase(userUseCase, albumWorkScheduler, remoteMediaUseCase, serverUseCase);
  }
}
