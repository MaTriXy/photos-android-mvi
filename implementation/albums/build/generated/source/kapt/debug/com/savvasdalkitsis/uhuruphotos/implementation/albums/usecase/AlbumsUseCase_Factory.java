// Generated by Dagger (https://dagger.dev).
package com.savvasdalkitsis.uhuruphotos.implementation.albums.usecase;

import com.savvasdalkitsis.uhuruphotos.api.albums.repository.AlbumsRepository;
import com.savvasdalkitsis.uhuruphotos.api.media.remote.domain.usecase.RemoteMediaUseCase;
import com.savvasdalkitsis.uhuruphotos.feature.user.domain.api.usecase.UserUseCase;
import com.savvasdalkitsis.uhuruphotos.foundation.date.api.DateDisplayer;
import com.savvasdalkitsis.uhuruphotos.implementation.albums.worker.AlbumWorkScheduler;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AlbumsUseCase_Factory implements Factory<AlbumsUseCase> {
  private final Provider<AlbumsRepository> albumsRepositoryProvider;

  private final Provider<DateDisplayer> dateDisplayerProvider;

  private final Provider<RemoteMediaUseCase> remoteMediaUseCaseProvider;

  private final Provider<AlbumWorkScheduler> albumWorkSchedulerProvider;

  private final Provider<UserUseCase> userUseCaseProvider;

  public AlbumsUseCase_Factory(Provider<AlbumsRepository> albumsRepositoryProvider,
      Provider<DateDisplayer> dateDisplayerProvider,
      Provider<RemoteMediaUseCase> remoteMediaUseCaseProvider,
      Provider<AlbumWorkScheduler> albumWorkSchedulerProvider,
      Provider<UserUseCase> userUseCaseProvider) {
    this.albumsRepositoryProvider = albumsRepositoryProvider;
    this.dateDisplayerProvider = dateDisplayerProvider;
    this.remoteMediaUseCaseProvider = remoteMediaUseCaseProvider;
    this.albumWorkSchedulerProvider = albumWorkSchedulerProvider;
    this.userUseCaseProvider = userUseCaseProvider;
  }

  @Override
  public AlbumsUseCase get() {
    return newInstance(albumsRepositoryProvider.get(), dateDisplayerProvider.get(), remoteMediaUseCaseProvider.get(), albumWorkSchedulerProvider.get(), userUseCaseProvider.get());
  }

  public static AlbumsUseCase_Factory create(Provider<AlbumsRepository> albumsRepositoryProvider,
      Provider<DateDisplayer> dateDisplayerProvider,
      Provider<RemoteMediaUseCase> remoteMediaUseCaseProvider,
      Provider<AlbumWorkScheduler> albumWorkSchedulerProvider,
      Provider<UserUseCase> userUseCaseProvider) {
    return new AlbumsUseCase_Factory(albumsRepositoryProvider, dateDisplayerProvider, remoteMediaUseCaseProvider, albumWorkSchedulerProvider, userUseCaseProvider);
  }

  public static AlbumsUseCase newInstance(AlbumsRepository albumsRepository,
      DateDisplayer dateDisplayer, RemoteMediaUseCase remoteMediaUseCase,
      AlbumWorkScheduler albumWorkScheduler, UserUseCase userUseCase) {
    return new AlbumsUseCase(albumsRepository, dateDisplayer, remoteMediaUseCase, albumWorkScheduler, userUseCase);
  }
}
