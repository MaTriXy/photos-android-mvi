// Generated by Dagger (https://dagger.dev).
package com.savvasdalkitsis.uhuruphotos.account.usecase;

import com.savvasdalkitsis.uhuruphotos.api.db.albums.AlbumsQueries;
import com.savvasdalkitsis.uhuruphotos.api.db.auth.TokenQueries;
import com.savvasdalkitsis.uhuruphotos.api.db.search.SearchQueries;
import com.savvasdalkitsis.uhuruphotos.api.db.user.UserQueries;
import com.savvasdalkitsis.uhuruphotos.api.image.cache.ImageCacheController;
import com.savvasdalkitsis.uhuruphotos.api.worker.WorkScheduler;
import com.savvasdalkitsis.uhuruphotos.implementation.account.usecase.AccountUseCase;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.Cache;

@ScopeMetadata
@QualifierMetadata("com.savvasdalkitsis.uhuruphotos.api.video.VideoCache")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AccountUseCase_Factory implements Factory<AccountUseCase> {
  private final Provider<UserQueries> userQueriesProvider;

  private final Provider<AlbumsQueries> albumsQueriesProvider;

  private final Provider<SearchQueries> searchQueriesProvider;

  private final Provider<TokenQueries> tokenQueriesProvider;

  private final Provider<ImageCacheController> imageCacheControllerProvider;

  private final Provider<Cache> videoCacheProvider;

  private final Provider<WorkScheduler> workSchedulerProvider;

  public AccountUseCase_Factory(Provider<UserQueries> userQueriesProvider,
      Provider<AlbumsQueries> albumsQueriesProvider, Provider<SearchQueries> searchQueriesProvider,
      Provider<TokenQueries> tokenQueriesProvider,
      Provider<ImageCacheController> imageCacheControllerProvider,
      Provider<Cache> videoCacheProvider, Provider<WorkScheduler> workSchedulerProvider) {
    this.userQueriesProvider = userQueriesProvider;
    this.albumsQueriesProvider = albumsQueriesProvider;
    this.searchQueriesProvider = searchQueriesProvider;
    this.tokenQueriesProvider = tokenQueriesProvider;
    this.imageCacheControllerProvider = imageCacheControllerProvider;
    this.videoCacheProvider = videoCacheProvider;
    this.workSchedulerProvider = workSchedulerProvider;
  }

  @Override
  public AccountUseCase get() {
    return newInstance(userQueriesProvider.get(), albumsQueriesProvider.get(), searchQueriesProvider.get(), tokenQueriesProvider.get(), imageCacheControllerProvider.get(), videoCacheProvider.get(), workSchedulerProvider.get());
  }

  public static AccountUseCase_Factory create(Provider<UserQueries> userQueriesProvider,
      Provider<AlbumsQueries> albumsQueriesProvider, Provider<SearchQueries> searchQueriesProvider,
      Provider<TokenQueries> tokenQueriesProvider,
      Provider<ImageCacheController> imageCacheControllerProvider,
      Provider<Cache> videoCacheProvider, Provider<WorkScheduler> workSchedulerProvider) {
    return new AccountUseCase_Factory(userQueriesProvider, albumsQueriesProvider, searchQueriesProvider, tokenQueriesProvider, imageCacheControllerProvider, videoCacheProvider, workSchedulerProvider);
  }

  public static AccountUseCase newInstance(UserQueries userQueries, AlbumsQueries albumsQueries,
      SearchQueries searchQueries, TokenQueries tokenQueries,
      ImageCacheController imageCacheController, Cache videoCache, WorkScheduler workScheduler) {
    return new AccountUseCase(userQueries, albumsQueries, searchQueries, tokenQueries, imageCacheController, videoCache, workScheduler);
  }
}
